import requests
import pandas as pd

API_KEY = "99164687-fd84-44f6-8da8-916d61c3d570"
headers = {'apiKey': API_KEY}

columns = ['Platform', 'Package Name', 'Version', 'CVE ID', 'Base Severity', 'Details']
dataframe = pd.DataFrame(columns=columns)


def keyword_search(package_name):
    keyword_search_base_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch='
    keyword_search_url = keyword_search_base_url + package_name
    keyword_search_r = requests.get(keyword_search_url, headers=headers)
    try:
        keyword_search_result = keyword_search_r.json()
    except requests.exceptions.JSONDecodeError as e:
        print("keyword search does not return a valid JSON object")
        print(e)
    else:
        if keyword_search_r.status_code == 200:
            cpe = keyword_search_result['vulnerabilities'][0]['cve']['configurations'][0]['nodes'][0]['cpeMatch'][0][
                'criteria']
            return cpe
        else:
            print("Server return error code " + str(keyword_search_r.status_code))


def is_vulnerable(cpe, version, language):
    nonlocal dataframe
    isvulnerable_base_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName='
    isvulnerable_tail = '&isVulnerable'
    cpe = cpe.split(":")
    package = cpe[4]
    cpe[5] = version
    cpe = ":".join(cpe)
    isvulnerable_url = isvulnerable_base_url + cpe + isvulnerable_tail
    isvulnerable_request = requests.get(isvulnerable_url, headers=headers)
    try:
        isvulnerable_json = isvulnerable_request.json()
        if isvulnerable_json['resultsPerPage'] == 0:
            print(cpe+" has no known vulnerability.")
        else:
            vulnerabilities = isvulnerable_json['vulnerabilities']
            for vulnerability in vulnerabilities:
                cve = vulnerability['cve']
                cve_id = cve['id']
                metrics = cve['metrics']
                keys = list(metrics.keys())
                cvssMetricV31 = metrics[keys[0]]
                baseSeverity = cvssMetricV31[0]['cvssData']['baseSeverity']
                description = cve['descriptions'][0]['value']
                temp = [language, package, version, cve_id, baseSeverity, description]
                dataframe.loc[len(dataframe)] = temp
    except requests.exceptions.JSONDecodeError as e:
        print("isVulnerable does not return a valid JSON")
        print(e)
    else:
        print("Server return error code " + str(isvulnerable_request.status_code))